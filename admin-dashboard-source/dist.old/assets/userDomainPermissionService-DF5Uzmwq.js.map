{"version":3,"file":"userDomainPermissionService-DF5Uzmwq.js","sources":["../../src/services/userDomainPermissionService.js"],"sourcesContent":["/**\n * 유저 도메인 권한 서비스\n */\nimport api from './api';\n\nconst userDomainPermissionService = {\n  /**\n   * 회원의 도메인 권한 정보 조회\n   */\n  getMemberPermission: async (memberId) => {\n    try {\n      const response = await api.get(`/user-domain-permissions/member/${memberId}`);\n      return response.data;\n    } catch (error) {\n      console.error('도메인 권한 조회 실패:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * 도메인 권한 부여 (1단계 -> 하위 단계)\n   */\n  grantPermission: async (data) => {\n    try {\n      const response = await api.post('/user-domain-permissions/grant', data);\n      return response.data;\n    } catch (error) {\n      console.error('도메인 권한 부여 실패:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * 도메인 권한 위임 (2단계 -> 3단계)\n   */\n  delegatePermission: async (data) => {\n    try {\n      const response = await api.post('/user-domain-permissions/delegate', data);\n      return response.data;\n    } catch (error) {\n      console.error('도메인 권한 위임 실패:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * 도메인 선택 (본인위임 시)\n   */\n  assignDomain: async (data) => {\n    try {\n      const response = await api.post('/user-domain-permissions/assign-domain', data);\n      return response.data;\n    } catch (error) {\n      console.error('도메인 할당 실패:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * 권한 회수\n   */\n  revokePermission: async (memberId, revokedBy) => {\n    try {\n      const response = await api.delete(`/user-domain-permissions/revoke/${memberId}`, {\n        data: { revoked_by: revokedBy }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('권한 회수 실패:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * 회원 업데이트 시 도메인 권한 처리\n   */\n  handleMemberUpdate: async (memberId, updateData, currentUser) => {\n    const results = [];\n    \n    try {\n      // 1. URL권한주기 처리 (1단계 회원)\n      if (updateData.grantPermissionTo) {\n        // 선택된 레벨에 속하는 자신의 라인의 모든 회원 찾기\n        const targetLevelId = parseInt(updateData.grantPermissionTo);\n        \n        // 자신의 전체 하위 회원 중 해당 레벨의 회원 찾기\n        // 재귀적으로 모든 하위를 찾는 API가 필요하지만, 현재는 직계 자식만 가져오는 API만 있음\n        // 따라서 단계적으로 찾아야 함\n        \n        const findMembersAtLevel = async (parentId, targetLevel) => {\n          const members = [];\n          const queue = [parentId];\n          const visited = new Set();\n          \n          while (queue.length > 0) {\n            const currentId = queue.shift();\n            if (visited.has(currentId)) continue;\n            visited.add(currentId);\n            \n            try {\n              const response = await api.get(`/members/${currentId}/children`);\n              if (response.data.success && response.data.data) {\n                for (const child of response.data.data) {\n                  if (child.agent_level_id === targetLevel) {\n                    members.push(child);\n                  }\n                  // 목표 레벨보다 상위면 계속 탐색\n                  if (child.agent_level_id < targetLevel) {\n                    queue.push(child.id);\n                  }\n                }\n              }\n            } catch (error) {\n              console.error(`회원 ${currentId}의 하위 조회 실패:`, error);\n            }\n          }\n          \n          return members;\n        };\n        \n        const targetMembers = await findMembersAtLevel(memberId, targetLevelId);\n        console.log(`${targetLevelId} 레벨 권한 부여 대상:`, targetMembers);\n        \n        // 각 대상 회원에게 권한 부여\n        for (const member of targetMembers) {\n          try {\n            const grantResult = await userDomainPermissionService.grantPermission({\n              member_id: member.id,\n              granted_by: memberId,  // 수정 중인 회원이 권한을 부여하는 것\n              can_delegate: true  // 2단계는 위임 가능\n            });\n            results.push({ \n              type: 'grant', \n              success: true, \n              message: `${member.username}에게 권한 부여 완료`,\n              target: member \n            });\n          } catch (grantError) {\n            console.error(`${member.username} 권한 부여 실패:`, grantError);\n            results.push({ \n              type: 'grant', \n              success: false, \n              message: `${member.username} 권한 부여 실패`,\n              target: member,\n              error: grantError.response?.data?.error \n            });\n          }\n        }\n      }\n      \n      // 2. 회원페이지URL권한 처리 (권한받은 회원)\n      if (updateData.delegatePermissionType) {\n        if (updateData.delegatePermissionType === 'self') {\n          // 본인위임 - 위임 권한 제거\n          const updateResult = await userDomainPermissionService.delegatePermission({\n            member_id: memberId,\n            delegated_by: memberId,\n            delegation_type: 'self'\n          });\n          results.push({ type: 'delegate', success: true, message: updateResult.message });\n        } else if (updateData.delegatePermissionType.startsWith('children_')) {\n          // 하위 레벨에 위임\n          const targetLevelId = parseInt(updateData.delegatePermissionType.replace('children_', ''));\n          \n          // findMembersAtLevel 함수를 재사용\n          const findMembersAtLevel = async (parentId, targetLevel) => {\n            const members = [];\n            const queue = [parentId];\n            const visited = new Set();\n            \n            while (queue.length > 0) {\n              const currentId = queue.shift();\n              if (visited.has(currentId)) continue;\n              visited.add(currentId);\n              \n              try {\n                const response = await api.get(`/members/${currentId}/children`);\n                if (response.data.success && response.data.data) {\n                  for (const child of response.data.data) {\n                    if (child.agent_level_id === targetLevel) {\n                      members.push(child);\n                    }\n                    // 목표 레벨보다 상위면 계속 탐색\n                    if (child.agent_level_id < targetLevel) {\n                      queue.push(child.id);\n                    }\n                  }\n                }\n              } catch (error) {\n                console.error(`회원 ${currentId}의 하위 조회 실패:`, error);\n              }\n            }\n            \n            return members;\n          };\n          \n          const targetMembers = await findMembersAtLevel(memberId, targetLevelId);\n          console.log(`위임 대상 회원들 (${targetLevelId} 레벨):`, targetMembers);\n          \n          // 각 대상 회원에게 위임\n          for (const member of targetMembers) {\n            try {\n              console.log(`위임 시도: ${member.username} (ID: ${member.id}), 위임자: ${memberId}, 타입: ${updateData.delegatePermissionType}`);\n              const delegateResult = await userDomainPermissionService.delegatePermission({\n                member_id: member.id,\n                delegated_by: memberId,\n                delegation_type: updateData.delegatePermissionType\n              });\n              results.push({ \n                type: 'delegate', \n                success: true, \n                message: `${member.username}에게 위임 완료`,\n                target: member \n              });\n            } catch (delegateError) {\n              console.error(`${member.username} 위임 실패:`, delegateError);\n              results.push({ \n                type: 'delegate', \n                success: false, \n                message: `${member.username} 위임 실패`,\n                target: member,\n                error: delegateError.response?.data?.error \n              });\n            }\n          }\n        }\n      }\n      \n      // 3. 회원페이지URL선택 처리 (본인위임 시)\n      if (updateData.selectedDomainId !== undefined) {\n        const assignResult = await userDomainPermissionService.assignDomain({\n          member_id: memberId,\n          domain_id: updateData.selectedDomainId ? parseInt(updateData.selectedDomainId) : null\n        });\n        results.push({ type: 'assign', success: true, message: assignResult.message });\n      }\n      \n      return {\n        success: true,\n        results\n      };\n    } catch (error) {\n      console.error('도메인 권한 업데이트 실패:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || '도메인 권한 업데이트 중 오류가 발생했습니다.',\n        results\n      };\n    }\n  }\n};\n\nexport default userDomainPermissionService;"],"names":["userDomainPermissionService","getMemberPermission","memberId","response","api","get","data","error","console","grantPermission","post","delegatePermission","assignDomain","revokePermission","revokedBy","delete","revoked_by","handleMemberUpdate","updateData","currentUser","results","grantPermissionTo","targetLevelId","parseInt","findMembersAtLevel","parentId","targetLevel","members","queue","visited","Set","length","currentId","shift","has","add","success","child","agent_level_id","push","id","targetMembers","log","member","grantResult","member_id","granted_by","can_delegate","type","message","username","target","grantError","delegatePermissionType","updateResult","delegated_by","delegation_type","startsWith","replace","delegateResult","delegateError","selectedDomainId","undefined","assignResult","domain_id"],"mappings":"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"}