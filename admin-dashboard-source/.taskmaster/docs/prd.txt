# Product Requirements Document: 회원 추적 시스템 개선 (재분석 버전)

## 1. 프로젝트 개요
### 목적
관리자 대시보드의 회원 추적 시스템을 개선하여 실시간 접속 상태, 게임 이력, 접속 로그를 효과적으로 관리하고 모니터링할 수 있도록 한다.

### 범위
- 실시간 접속/비접속 상태 추적 및 영속성 확보
- 마지막 게임 정보 정확한 표시
- 대시보드 활동중인사용자 테이블 실제 데이터 연동
- 데이터 영속성 보장

## 2. 현재 상태 분석 (정확한 재분석)

### 구현된 기능
- Socket.IO 기반 실시간 통신 인프라 완전 구현
- UserStatusService를 통한 메모리 기반 상태 관리
- 회원관리 페이지의 실시간 접속 상태 표시
- ActiveUsersTable 컴포넌트 존재 (대시보드)
- user_activity_logs 테이블 활발히 사용 (50만+ 레코드)
- login_logs, game_play_logs 등 로그 테이블 존재

### 미구현 또는 개선 필요 사항
- 데이터베이스 영속성 부재 (서버 재시작 시 100% 데이터 소실)
- ActiveUsersTable이 하드코딩된 12명의 샘플 데이터만 표시
- 마지막 게임 이름 표시 미구현 (날짜/시간만 표시)
- UserStatusService와 DB 간 동기화 없음

## 3. 기능 요구사항 (재수립)

### 3.1 데이터베이스 영속성 구현
- members 테이블 기존 필드 활용 (connectionStatus, connectionDate, lastGame)
- 최소한의 필드만 추가
  - last_game_name: 마지막 게임 이름
  - online_status: 실시간 접속 상태
  - current_session_id: 현재 세션 ID
- game_play_logs 테이블 활용 강화

### 3.2 백엔드 개선
- UserStatusService에 데이터베이스 영속성 추가
- 로그인/로그아웃 시 members 테이블 업데이트
- 게임 시작/종료 시 게임 정보 저장
- user_activity_logs 테이블 활용한 이벤트 로깅

### 3.3 대시보드 ActiveUsersTable 실제 데이터 연동
- 하드코딩된 12명의 샘플 데이터 제거
- `/user-status/all` API와 실제 연동
- Socket.IO 실시간 업데이트 구현
- 새로고침 버튼 실제 동작 구현

### 3.4 프론트엔드 UI 개선
- 회원관리 페이지의 마지막 게임 컬럼에 게임 이름 표시
- 접속 상태 시각화 개선 (색상 코딩, 아이콘)

### 3.5 실시간 동기화
- 접속 상태 변경 시 실시간 UI 업데이트
- 게임 시작/종료 시 게임 정보 실시간 반영
- 모든 관련 페이지에서 일관된 데이터 표시

## 4. 비기능 요구사항

### 성능
- 실시간 업데이트 지연시간 < 1초
- 대량 사용자 동시 접속 지원 (1000+ 사용자)

### 안정성
- 서버 재시작 시 데이터 보존
- 네트워크 장애 시 자동 재연결
- 데이터 정합성 보장

### 보안
- 세션 관리 보안 강화
- 비정상 접속 감지 및 차단
- 로그 데이터 무결성 보장

## 5. 구현 우선순위 (재수립)

### Phase 1: 데이터 영속성 구현 (최우선)
1. members 테이블 최소 필드 추가
2. UserStatusService DB 연동
3. 로그인/로그아웃/게임 이벤트 DB 기록

### Phase 2: 대시보드 실제 데이터 연동 (높음)
4. ActiveUsersTable 하드코딩 제거
5. API 연동 및 실시간 업데이트

### Phase 3: UI 개선 (중간)
6. 마지막 게임 이름 표시
7. 접속 상태 시각화

### Phase 4: 고급 기능 (낮음)
8. Redis 캐싱 도입
9. 세션 관리 고도화

## 6. 제약사항
- 기존 시스템과의 호환성 유지
- 실시간 성능 저하 방지
- 데이터베이스 부하 최소화
- 사용자 경험 저해 없는 점진적 개선

## 7. 성공 기준
- 서버 재시작 후에도 회원 추적 데이터 유지 (영속성 확보)
- 대시보드 ActiveUsersTable에 실제 데이터 표시
- 마지막 게임 이름 정확한 표시
- 기존 기능 영향 없이 안정적 운영

## 8. 위험 요소
- ActiveUsersTable 하드코딩 제거 시 빈 화면 가능
- 메모리-DB 동기화 중 데이터 불일치
- 기존 테이블 필드와의 충돌 가능성
- 대량 동시 접속 시 성능 저하

## 9. 테스트 계획
- 단위 테스트: 각 서비스 함수
- 통합 테스트: API 엔드포인트
- E2E 테스트: 사용자 시나리오
- 성능 테스트: 동시 접속 부하
- 회귀 테스트: 기존 기능 검증